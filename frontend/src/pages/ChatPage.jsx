import React, { useState, useEffect } from 'react'
import VoiceInput from '../components/VoiceInput'
import MessageBubble from '../components/MessageBubble'
import { sendChatMessage } from '../utils/api'
import '../styles/chat.css'

export default function ChatPage() {
  const [chat, setChat] = useState([])
  const [input, setInput] = useState('')
  const [loading, setLoading] = useState(false)
  const [voices, setVoices] = useState([])
  const [userLang, setUserLang] = useState('en')

  // üîÑ Load voices with retry
  useEffect(() => {
    const waitForVoices = () => {
      const allVoices = window.speechSynthesis.getVoices()
      if (allVoices.length > 0) {
        setVoices(allVoices)
        console.log("‚úÖ Voices loaded:", allVoices.map(v => `${v.name} - ${v.lang}`))
      } else {
        console.log("üîÅ Waiting for voices...")
        setTimeout(waitForVoices, 200)
      }
    }
    waitForVoices()
  }, [])

  // ‚úÖ Offline Hindi/Marathi language detection
const detectLanguage = (text) => {
  // üîπ Common Hindi and Marathi words
  const hindiWords = [
    "‡§ï‡•ç‡§Ø‡§æ", "‡§ï‡•à‡§∏‡•á", "‡§ï‡•å‡§®", "‡§Ü‡§™", "‡§π‡•à‡§Ç", "‡§π‡•Ç‡§Å", "‡§π‡•ã", "‡§•‡§æ", "‡§•‡•Ä", "‡§•‡•ã‡§°‡§º‡§æ", "‡§¨‡§π‡•Å‡§§", "‡§∏‡§Æ‡§Ø", "‡§ï‡•ç‡§Ø‡•ã‡§Ç", "‡§ï‡§¨",
    "‡§Ö‡§¨", "‡§¨‡§æ‡§¶", "‡§ú‡•à‡§∏‡•á", "‡§ï‡§π‡§æ‡§Å", "‡§Ø‡§π", "‡§µ‡§π", "‡§Æ‡•Å‡§ù‡•á", "‡§§‡•Å‡§Æ", "‡§π‡§Æ", "‡§Æ‡•à‡§Ç", "‡§Æ‡•á‡§∞‡§æ", "‡§Æ‡•á‡§∞‡•Ä", "‡§Ö‡§™‡§®‡§æ", "‡§ñ‡•Å‡§∂",
    "‡§™‡§¢‡§º‡§æ‡§à", "‡§ñ‡§æ‡§®‡§æ", "‡§™‡§æ‡§®‡•Ä", "‡§∏‡•ç‡§ï‡•Ç‡§≤", "‡§ò‡§∞", "‡§¶‡•ã‡§∏‡•ç‡§§", "‡§∂‡§æ‡§¶‡•Ä", "‡§ï‡§æ‡§Æ", "‡§™‡§¢‡§º‡§®‡§æ", "‡§≤‡§ø‡§ñ‡§®‡§æ", "‡§ó‡§æ‡§®‡§æ", "‡§®‡§æ‡§ö‡§®‡§æ",
    "‡§´‡§ø‡§≤‡•ç‡§Æ", "‡§ü‡•Ä‡§µ‡•Ä", "‡§¶‡•á‡§ñ‡§®‡§æ", "‡§∏‡§Æ‡§ù", "‡§∏‡•Å‡§®‡•ã", "‡§¨‡§§‡§æ‡§ì", "‡§¨‡•ã‡§≤‡•ã", "‡§¨‡§§‡§æ‡§á‡§è", "‡§ö‡§≤‡§ø‡§è", "‡§ï‡•É‡§™‡§Ø‡§æ", "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶",
    "‡§∏‡§µ‡§æ‡§≤", "‡§ú‡§µ‡§æ‡§¨", "‡§∏‡§ö", "‡§ù‡•Ç‡§†", "‡§≠‡§æ‡§∑‡§æ", "‡§π‡§ø‡§Ç‡§¶‡•Ä", "‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ", "‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®", "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§", "‡§∏‡•ç‡§µ‡§∏‡•ç‡§•", "‡§∂‡•Å‡§≠",
    "‡§∞‡§æ‡§§", "‡§¶‡•ã‡§™‡§π‡§∞", "‡§∏‡•Å‡§¨‡§π", "‡§∂‡§æ‡§Æ", "‡§Ö‡§≠‡•Ä", "‡§ú‡§≤‡•ç‡§¶‡•Ä", "‡§ß‡•Ä‡§∞‡•á", "‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤", "‡§ú‡§∞‡•Ç‡§∞‡•Ä", "‡§Æ‡§¶‡§¶", "‡§ï‡•É‡§™‡§Ø‡§æ",
    "‡§∏‡§ø‡§ñ‡§æ‡§ì", "‡§¨‡§ö‡§™‡§®", "‡§¨‡•Ç‡§¢‡§º‡§æ", "‡§®‡§à", "‡§™‡•Å‡§∞‡§æ‡§®‡§æ", "‡§Ö‡§ö‡•ç‡§õ‡§æ", "‡§¨‡•Å‡§∞‡§æ", "‡§†‡•Ä‡§ï", "‡§ñ‡§§‡•ç‡§Æ", "‡§ö‡•Å‡§™", "‡§ú‡§æ‡§ì", "‡§†‡§π‡§∞‡•ã"
  ]

  const marathiWords = [
    "‡§ï‡§æ‡§Ø", "‡§ï‡§∏‡§æ", "‡§ï‡§∂‡•Ä", "‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä", "‡§Ü‡§™‡§£", "‡§Ü‡§π‡•á", "‡§π‡•ã‡§§‡•á", "‡§ù‡§æ‡§≤‡•á", "‡§Æ‡§æ‡§ù‡§Ç", "‡§®‡§æ‡§µ", "‡§ñ‡•Ç‡§™", "‡§õ‡§æ‡§®", "‡§Ö‡§∏‡§§‡•á",
    "‡§≠‡•Ç‡§ï", "‡§ù‡§æ‡§≤‡•Ä", "‡§ñ‡§æ‡§≤‡•ç‡§≤‡§Ç", "‡§Ü‡§à", "‡§µ‡§°‡•Ä‡§≤", "‡§∂‡§æ‡§≥‡§æ", "‡§∏‡§æ‡§Ç‡§ó", "‡§ò‡§∞", "‡§ó‡•á‡§≤‡•ã", "‡§ï‡•Å‡§†‡•á", "‡§Ø‡•á", "‡§ú‡§æ‡§£‡•á", "‡§®‡§æ‡§π‡•Ä",
    "‡§π‡•ã", "‡§π‡•ã‡§§‡•á", "‡§π‡•ã‡§£‡§æ‡§∞", "‡§∂‡§ø‡§ï‡§µ‡§≤‡•á", "‡§ñ‡§∞‡§Ç", "‡§ñ‡§∞‡§Ç‡§ö", "‡§ó‡•ã‡§°", "‡§•‡•ã‡§°‡§Ç", "‡§™‡§æ‡§£‡•Ä", "‡§ö‡§π‡§æ", "‡§≠‡§æ‡§§", "‡§≠‡§æ‡§ú‡•Ä", "‡§µ‡§ø‡§ö‡§æ‡§∞",
    "‡§∂‡§¨‡•ç‡§¶", "‡§∏‡§Æ‡§ú‡§≤‡§Ç", "‡§ï‡§∞‡§§‡•ã", "‡§ï‡§∞‡§§‡•á", "‡§ú‡§Æ‡•á‡§≤", "‡§ï‡•É‡§™‡§Ø‡§æ", "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶", "‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ‡§ï‡§æ‡§≥‡•Ä", "‡§∏‡§ï‡§æ‡§≥‡•Ä", "‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ", "‡§∞‡§æ‡§§‡•ç‡§∞",
    "‡§≠‡•á‡§ü", "‡§Æ‡§®‡§æ‡§™‡§æ‡§∏‡•Ç‡§®", "‡§Æ‡§æ‡§´", "‡§â‡§¶‡•ç‡§Ø‡§æ", "‡§Ü‡§ú", "‡§ï‡§æ‡§≤", "‡§∏‡•ã‡§™‡§Ç", "‡§ï‡§†‡•Ä‡§£", "‡§∏‡§æ‡§Ç‡§ó‡§ø‡§§‡§≤‡§Ç", "‡§¨‡•ã‡§≤", "‡§∂‡§ø‡§ï‡§µ", "‡§ú‡§∞‡§æ",
    "‡§•‡§æ‡§Ç‡§¨", "‡§•‡§æ‡§Ç‡§¨‡§æ", "‡§¨‡§ò", "‡§™‡§æ‡§π", "‡§π‡§∏", "‡§∞‡§°", "‡§ö‡§ø‡§°", "‡§∂‡§ø‡§ï", "‡§ï‡§æ‡§Æ", "‡§µ‡§æ‡§ö‡§®", "‡§ó‡§æ‡§£‡§Ç", "‡§∏‡§Ç‡§ó‡•Ä‡§§", "‡§ö‡§ø‡§§‡•ç‡§∞‡§™‡§ü",
    "‡§Æ‡§ø‡§§‡•ç‡§∞", "‡§Æ‡•à‡§§‡•ç‡§∞‡•Ä", "‡§™‡•ç‡§∞‡•á‡§Æ", "‡§≠‡§æ‡§ä", "‡§¨‡§π‡•Ä‡§£", "‡§™‡•Å‡§∏‡•ç‡§§‡§ï", "‡§∏‡§§‡•ç‡§Ø", "‡§ñ‡•ã‡§ü‡§Ç", "‡§∂‡§ø‡§ï‡•ç‡§∑‡§£", "‡§∏‡§Ç‡§¶‡•á‡§∂", "‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä", "‡§§‡§™‡§∂‡•Ä‡§≤"
  ]

  const isHindi = hindiWords.some(word => text.includes(word))
  const isMarathi = marathiWords.some(word => text.includes(word))

  if (isHindi && !isMarathi) {
    console.log("üß† Detected: Hindi (via keyword)")
    return 'hi'
  }

  if (isMarathi && !isHindi) {
    console.log("üß† Detected: Marathi (via keyword)")
    return 'mr'
  }

  if (isHindi && isMarathi) {
    console.log("üß† Detected: Shared script, falling back to Hindi")
    return 'hi'
  }

  // Fallback using script (Unicode range for Devanagari)
  const hasDevanagari = /[\u0900-\u097F]/.test(text)
  if (hasDevanagari) {
    console.log("üß† Detected: Devanagari script, assuming Hindi")
    return 'hi'
  }

  console.log("üß† Detected: English (default fallback)")
  return 'en'
}


  // üîÅ Translation disabled (no LibreTranslate)
  const translateText = async (text, from, to) => {
    if (from === to) return text
    return text // no real translation (could integrate later)
  }

  // üîä Voice speaker with language awareness
  const speak = (text, lang = 'en') => {
    const speakWhenReady = () => {
      const allVoices = window.speechSynthesis.getVoices()
      const lekha = allVoices.find(v => v.name.includes('Lekha'))

      const finalVoice = (lang === 'hi' || lang === 'mr') && lekha
        ? lekha
        : allVoices.find(v => v.lang === lang) ||
          allVoices.find(v => v.lang.startsWith(lang)) ||
          allVoices.find(v => v.lang.startsWith('en')) ||
          allVoices[0]

      if (!finalVoice) {
        console.warn("‚ùå No voice found for lang:", lang)
        return
      }

      const utter = new SpeechSynthesisUtterance(text)
      utter.voice = finalVoice
      utter.lang = finalVoice.lang
      utter.rate = 1
      utter.pitch = 1

      console.log(`üó£Ô∏è Speaking using: ${finalVoice.name} (${finalVoice.lang})`)
      window.speechSynthesis.cancel()
      window.speechSynthesis.speak(utter)
    }

    if (!voices.length) {
      console.log("‚è≥ Voices not ready, retrying...")
      setTimeout(() => speak(text, lang), 200)
    } else {
      speakWhenReady()
    }
  }

  const addMessage = (type, text) => {
    setChat(prev => [...prev, { type, text }])
  }

  const processMessage = async (text) => {
    const detectedLang = detectLanguage(text)
    setUserLang(detectedLang)
    console.log("üåê Detected Language:", detectedLang)

    const translatedToEnglish = await translateText(text, detectedLang, 'en')
    const response = await sendChatMessage(translatedToEnglish)

    const botReplyInEnglish = response.reply || response.message || '...'
    const translatedBack = await translateText(botReplyInEnglish, 'en', detectedLang)

    addMessage('bot', translatedBack)
    speak(translatedBack, detectedLang)
  }

  const handleSubmit = async () => {
    if (!input.trim()) return
    addMessage('user', input)
    setInput('')
    setLoading(true)
    try {
      await processMessage(input)
    } catch (err) {
      const errorMsg = 'Something went wrong'
      addMessage('bot', errorMsg)
      speak(errorMsg, 'en')
    } finally {
      setLoading(false)
    }
  }

  const handleVoice = async (text) => {
    if (!text.trim()) return
    addMessage('user', text)
    setInput(text)
    setLoading(true)
    try {
      await processMessage(text)
    } catch (err) {
      const errorMsg = 'Something went wrong'
      addMessage('bot', errorMsg)
      speak(errorMsg, 'en')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="chat-container">
      <h2>üó£Ô∏è Multilingual Voice Chatbot</h2>
      <div className="chat-history">
        {chat.map((msg, idx) => (
          <MessageBubble key={idx} type={msg.type} text={msg.text} />
        ))}
        {loading && <MessageBubble type="bot" text="Typing..." />}
      </div>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <textarea
          rows={2}
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your message..."
          style={{
            width: '80%',
            height: '70px',
            padding: '10px 12px',
            fontSize: '1rem',
            backgroundColor: '#2a2a2a',
            color: 'white',
            border: 'none',
            borderRadius: '10px',
            resize: 'none',
          }}
        />
        <button onClick={handleSubmit}>Send</button>
        <VoiceInput onResult={handleVoice} />
      </div>
    </div>
  )
}
